addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',number, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$number,reverse = TRUE),
values = poly_state@data$number,
opacity = 0.9
)
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(count)," places"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',number, reverse = TRUE)(number),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$number,reverse = TRUE),
values = poly_state@data$number,
opacity = 0.9
)
View(Barcelona)
Barcelona$neighbourhood
str(Barcelona$neighbourhood)
str(as.character(Barcelona$neighbourhood))
str(unique(as.character(Barcelona$neighbourhood)))
New_York <- subset(data2, city == "New York")
View(New_York)
library(rgdal)
my_spdf <- readOGR("Counties.shp",verbose=FALSE)
my_spdf <- readOGR("Counties.shp",layer="Counties",verbose=FALSE)
library(rgdal)
my_spdf <- readOGR(".",layer="Counties",verbose=FALSE)
library(raster)
shapefile("Counties.shp")
getwd()
shapefile("Counties")
library(raster)
filename <- system.file("Counties.shp", package="raster")
filename
p <- shapefile(filename)
filename <- system.file("Counties.shp", package="raster")
library(rgdal)
my_spdf <- readOGR("NYS_Civil_Boundaries_SHP",layer="Counties",verbose=FALSE)
View(my_spdf)
library(rgdal)
my_spdf <- readOGR("NYS_Civil_Boundaries_SHP",layer="Counties",verbose=FALSE)
poly_state <- my_spdf
poly_state <- my_spdf
poly_state@data <- poly_state@data %>%
mutate(WATER_LAND_RATIO = as.numeric(as.character(125)) / as.numeric(as.character(128)),
content = paste0(125,': ',WATER_LAND_RATIO))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',WATER_LAND_RATIO)(WATER_LAND_RATIO),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$WATER_LAND_RATIO),
values = poly_state@data$WATER_LAND_RATIO,
opacity = 0.9
)
library(rgdal)
my_spdf <- readOGR("NYS_Civil_Boundaries_SHP",layer="State",verbose=FALSE)
poly_state <- my_spdf
poly_state <- my_spdf
poly_state@data <- poly_state@data %>%
mutate(WATER_LAND_RATIO = as.numeric(as.character(125)) / as.numeric(as.character(128)),
content = paste0(125,': ',WATER_LAND_RATIO))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',WATER_LAND_RATIO)(WATER_LAND_RATIO),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$WATER_LAND_RATIO),
values = poly_state@data$WATER_LAND_RATIO,
opacity = 0.9
)
View(my_spdf)
View(poly_state)
library(rgdal)
my_spdf <- readOGR("NYS_Civil_Boundaries_SHP",layer="County Storyline",verbose=FALSE)
poly_state <- my_spdf
poly_state@data <- poly_state@data %>%
mutate(WATER_LAND_RATIO = as.numeric(as.character(125)) / as.numeric(as.character(128)),
content = paste0(125,': ',WATER_LAND_RATIO))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',WATER_LAND_RATIO)(WATER_LAND_RATIO),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$WATER_LAND_RATIO),
values = poly_state@data$WATER_LAND_RATIO,
opacity = 0.9
)
View(New_York)
View(my_spdf)
View(spdf)
View(my_spdf)
# Let's read the jeoJson file that is stored on the web with the geojsonio library:
library(geojsonio)
spdf <- geojson_read("NY.json",  what = "sp")
poly_state <- spdf
poly_state@data <- poly_state@data %>%
mutate(WATER_LAND_RATIO = as.numeric(as.character(125)) / as.numeric(as.character(128)),
content = paste0(125,': ',WATER_LAND_RATIO))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',WATER_LAND_RATIO)(WATER_LAND_RATIO),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$WATER_LAND_RATIO),
values = poly_state@data$WATER_LAND_RATIO,
opacity = 0.9
)
poly_state <- spdf
poly_state@data <- poly_state@data %>%
mutate(WATER_LAND_RATIO = as.numeric(as.character(125)) / as.numeric(as.character(128)),
content = paste0(neighborhood,': ',WATER_LAND_RATIO))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',WATER_LAND_RATIO)(WATER_LAND_RATIO),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$WATER_LAND_RATIO),
values = poly_state@data$WATER_LAND_RATIO,
opacity = 0.9
)
New_York
NewYorkNewest <- subset(New_York, period == "2020_12")
NewYorkNewest <- subset(New_York, period == "2020_12")
leaflet(data = NewYorkNewest) %>% addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%  addCircleMarkers(~longitude, ~latitude, weight = 1, radius=1, fillOpacity = 0.1, opacity = 0.1)
data3 <- NewYorkNewest %>%
group_by(.dots=c("neighbourhood")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
data4 <- data3[match(poly_state$neighborhood, data3$neighbourhood),]
View(data4)
poly_state$price <- data4$AvePrice
poly_state$neigh <- data4$neighbourhood
poly_state$number <- data4$Count
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(price)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',price, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$price,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(price)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',number, reverse = TRUE)(number),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$number,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(number)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',number, reverse = TRUE)(number),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$number,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
View(data4)
#This is a function to reverse geocoding based on coordinates
rev_geo<-function(lat,long){
#First the coordinates are transformed to spatialpoints
points<-SpatialPoints(matrix(c(long,
lat),ncol=2,nrow=1))
#Creating a projection of the coordinates on the map of countries
proj4string(points) <- proj4string(countries_map)
#To see where the name of the country is stored in the map object, you need to explore it in R and see the “data” element. In this case, “NAME” has the information that we want. The function over returns the name of the country given the coordinates projected in the countries_map
country<-as.character(over(points, countries_map)$NAME)
return(as.vector(c(country)))
}
library(sp)
library(rgdal)
startg <- Sys.time()
#Reading each of the maps. dsn is the folder of the map and layer is the name of the .shp file inside.
countries_map<- poly_state
#This is a function to reverse geocoding based on coordinates
rev_geo<-function(lat,long){
#First the coordinates are transformed to spatialpoints
points<-SpatialPoints(matrix(c(long,
lat),ncol=2,nrow=1))
#Creating a projection of the coordinates on the map of countries
proj4string(points) <- proj4string(countries_map)
#To see where the name of the country is stored in the map object, you need to explore it in R and see the “data” element. In this case, “NAME” has the information that we want. The function over returns the name of the country given the coordinates projected in the countries_map
country<-as.character(over(points, countries_map)$NAME)
return(as.vector(c(country)))
}
View(NewYorkNewest)
rev_geo(40.75362,-73.98377)
rev_geo("40.75362","-73.98377")
rev_geo(40.75362,-73.98377)
#This is a function to reverse geocoding based on coordinates
rev_geo<-function(lat,long){
#First the coordinates are transformed to spatialpoints
points<-SpatialPoints(matrix(c(long,
lat),ncol=2,nrow=1))
#Creating a projection of the coordinates on the map of countries
proj4string(points) <- proj4string(countries_map)
#To see where the name of the country is stored in the map object, you need to explore it in R and see the “data” element. In this case, “NAME” has the information that we want. The function over returns the name of the country given the coordinates projected in the countries_map
country<-as.character(over(points, countries_map)$NAME)
return(country)
}
rev_geo(40.75362,-73.98377)
View(poly_state)
#Reading each of the maps. dsn is the folder of the map and layer is the name of the .shp file inside.
countries_map<- poly_state
#This is a function to reverse geocoding based on coordinates
rev_geo<-function(lat,long){
#First the coordinates are transformed to spatialpoints
points<-SpatialPoints(matrix(c(long,
lat),ncol=2,nrow=1))
#Creating a projection of the coordinates on the map of countries
proj4string(points) <- proj4string(countries_map)
#To see where the name of the country is stored in the map object, you need to explore it in R and see the “data” element. In this case, “NAME” has the information that we want. The function over returns the name of the country given the coordinates projected in the countries_map
country<-as.character(over(points, countries_map)$neighbor)
return(country)
}
rev_geo(40.75362,-73.98377)
View(NewYorkNewest)
library(snow)
library(foreach)
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
#Now for each row in the dataset I am going to return the reverse geocoding
# I am using parallel processing here to make the process faster
map_info<-foreach(i=1:nrow(NewYorkNewest),
.packages = c("sp", "rgdal"), .combine=rbind) %dopar% {
rev_geo(as.numeric(NewYorkNewest[i,"latitude"]),
as.numeric(NewYorkNewest[i,"longitude"]))
}
stopCluster(cl)
endg <- Sys.time()
View(NewYorkNewest)
View(map_info)
new<- merge(x = NewYorkNewest, y = map_info, by = NULL)
new<- cbind(NewYorkNewest, map_info)
View(new)
data4 <- data3[match(poly_state$neighborhood, new$map_info),]
poly_state$price <- data4$AvePrice
poly_state$neigh <- data4$map_info
poly_state$number <- data4$Count
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(number)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',number, reverse = TRUE)(number),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$number,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(number)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',price, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$price,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(price)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',price, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$price,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
View(poly_state)
NewYorkNewest <- subset(New_York, period == "2020_12")
leaflet(data = NewYorkNewest) %>% addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%  addCircleMarkers(~longitude, ~latitude, weight = 1, radius=1, fillOpacity = 0.1, opacity = 0.1)
data3 <- NewYorkNewest %>%
group_by(.dots=c("neighbourhood")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
data4 <- data3[match(poly_state$neighborhood, new$map_info),]
View(data4)
View(NewYorkNewest)
NewYorkNewest <- subset(New_York, period == "2020_12")
data3 <- NewYorkNewest %>%
group_by(.dots=c("neighbourhood")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
View(new)
data4 <- new[match(poly_state$neighborhood, new$map_info),]
View(data4)
data3 <- new %>%
group_by(.dots=c("map_info")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
View(new)
data3 <- new %>%
group_by(.dots=c("map_info")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE))
data4 <- data3[match(poly_state$neighborhood, new$map_info),]
poly_state$price <- data4$AvePrice
poly_state$neigh <- data4$map_info
poly_state$number <- data4$Count
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(price)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',price, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$price,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
View(data4)
View(new)
data3 <- new %>%
group_by(.dots=c("map_info")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE))
data3 <- new %>%
group_by("map_info") %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE))
View(new)
str(new)
as.data.frame(new)
new <- as.data.frame(new)
data3 <- new %>%
group_by(.dots=c("neighbourhood")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
View(data3)
data3 <- new %>%
group_by(.dots=c("map_info")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
str(NewYorkNewest)
str(new)
NewYorkNewest <- subset(New_York, period == "2020_12")
leaflet(data = NewYorkNewest) %>% addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%  addCircleMarkers(~longitude, ~latitude, weight = 1, radius=1, fillOpacity = 0.1, opacity = 0.1)
NewYorkNewest <- subset(New_York, period == "2020_12")
pal <- colorFactor(palette = c("red", "green", "blue", "purple", "yellow"), domain = NewYorkNewest$neighbourhood_group)
leaflet(data = NewYorkNewest) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircleMarkers(~longitude, ~latitude, color = ~pal(neighbourhood_group), weight = 1, radius=1, fillOpacity = 0.1, opacity = 0.1)
NewYorkNewest <- subset(New_York, period == "2020_12")
pal <- colorFactor(palette = c("red", "green", "blue", "purple", "yellow"), domain = NewYorkNewest$neighbourhood_group)
leaflet(data = NewYorkNewest) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircleMarkers(~longitude, ~latitude, color = ~pal(neighbourhood_group), weight = 1, radius=1, fillOpacity = 0.1, opacity = 0.1,
label = paste("Name:", airbnb$name)) %>%
addLegend("bottomright", pal = pal, values = ~neighbourhood_group,
title = "Neighbourhood groups",
opacity = 1
)
NewYorkNewest <- subset(New_York, period == "2020_12")
pal <- colorFactor(palette = c("red", "green", "blue", "purple", "yellow"), domain = NewYorkNewest$neighbourhood_group)
leaflet(data = NewYorkNewest) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircleMarkers(~longitude, ~latitude, color = ~pal(neighbourhood_group), weight = 1, radius=1, fillOpacity = 0.1, opacity = 0.1,
label = paste("Name:", NewYorkNewest$name)) %>%
addLegend("bottomright", pal = pal, values = ~neighbourhood_group,
title = "Neighbourhood groups",
opacity = 1
)
data3 <- new %>%
group_by(.dots=c("map_info")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
summary(new)
new <- new[complete.cases(new$map_info,]
new <- new[complete.cases(new$map_info),]
data3 <- new %>%
group_by(.dots=c("map_info")) %>%
summarise(AvePrice = mean(price, na.rm = TRUE),
MedianPrice = median(price, na.rm = TRUE),
Count = n())
View(data3)
data4 <- data3[match(poly_state$neighborhood, new$map_info),]
View(data4)
data4 <- data3[match(poly_state$neighborhood, data3$map_info),]
View(data4)
poly_state$price <- data4$AvePrice
poly_state$neigh <- data4$map_info
poly_state$number <- data4$Count
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(price)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',price, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$price,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
data4$AvePrice[data4$Count < 2] <- NA
poly_state$price <- data4$AvePrice
poly_state$neigh <- data4$map_info
poly_state$number <- data4$Count
poly_state@data <- poly_state@data %>%
mutate(content = paste0(neigh,': ',round(price)," $"))
poly_state %>%
leaflet() %>%
addTiles() %>%
addPolygons(data = poly_state,
weight=1, opacity = 1.0,color = 'white',
fillOpacity = 0.9, smoothFactor = 0.5,
fillColor = ~colorBin('RdBu',price, reverse = TRUE)(price),
label = ~content) %>%
addLegend(
"topright",
pal = colorBin('RdBu', poly_state@data$price,reverse = TRUE),
values = poly_state@data$price,
opacity = 0.9
)
